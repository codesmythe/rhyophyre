                              1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                              2 ;  sio0.s -- driver for Serial I/O on a Z180
                              3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                              4 ;
                              5 ;   Copyright (C) 2014 John R. Coffman.  All rights reserved.
                              6 ;   Provided for hobbyist use on the Z180 SBC Mark IV board.
                              7 ;
                              8 ; This program is free software: you can redistribute it and/or modify
                              9 ; it under the terms of the GNU General Public License as published by
                             10 ; the Free Software Foundation, either version 3 of the License, or
                             11 ; (at your option) any later version.
                             12 ;
                             13 ; This program is distributed in the hope that it will be useful,
                             14 ; but WITHOUT ANY WARRANTY; without even the implied warranty of
                             15 ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                             16 ; GNU General Public License for more details.
                             17 ;
                             18 ; You should have received a copy of the GNU General Public License
                             19 ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
                             20 ;
                             21 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             22 	.module	sio0
                             23 	.z180
                             24 .include "z180cpu.s"
                              1 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                              2 ; z180cpu.s -- define I/O registers on the Z180 cpu
                              3 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                              4 ;
                              5 ;   This version is for assembly by  SDCC 3.0.0
                              6 ;
                              7 ; Copyright (C) 2013 John R. Coffman.  All rights reserved.
                              8 ; Provided for hobbyist use on the N8VEM SBC Mark IV board.
                              9 ;
                             10 ; This program is free software: you can redistribute it and/or modify
                             11 ; it under the terms of the GNU General Public License as published by
                             12 ; the Free Software Foundation, either version 3 of the License, or
                             13 ; (at your option) any later version.
                             14 ;
                             15 ; This program is distributed in the hope that it will be useful,
                             16 ; but WITHOUT ANY WARRANTY; without even the implied warranty of
                             17 ; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                             18 ; GNU General Public License for more details.
                             19 ;
                             20 ; You should have received a copy of the GNU General Public License
                             21 ; along with this program.  If not, see <http://www.gnu.org/licenses/>.
                             22 ;
                             23 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                             24 ; z180cpu.s
                             25 ;
                             26 ; define I/O registers on the Z180 cpu
                             27 ;
                     0001    28 Z8S180	= 1
                             29 ;	hd64
                             30 ; The following Z8S180= option must be set:
                             31 ;       0       Z80180
                             32 ;       1       Z8S180 or Z8L180
                             33 
                     0040    34 Z180_IO_BASE      =       0x0040          ; relocation of 64 (0x40) registers
                             35 
                             36 ;       ASCI registers
                     0040    37 ASCI    =       Z180_IO_BASE
                             38 
                     0040    39 cntla0  =    ASCI + 0x00    ; control register A, channel 0     p. 293
                     0041    40 cntla1  =    ASCI + 0x01    ;       channel 1
                     0042    41 cntlb0  =    ASCI + 0x02    ; control register B, channel 0
                     0043    42 cntlb1  =    ASCI + 0x03    ;       channel 1
                     0044    43 stat0   =    ASCI + 0x04    ; status channel 0
                     0045    44 stat1   =    ASCI + 0x05    ;       channel 1
                     0046    45 tdr0    =    ASCI + 0x06    ; transmit data register channel 0
                     0047    46 tdr1    =    ASCI + 0x07    ;       channel 1                   
                     0048    47 rdr0    =    ASCI + 0x08    ; receive data register channel 0
                     0049    48 rdr1    =    ASCI + 0x09    ;       channel 1
                     0001    49 .if   Z8S180
                     0052    50 asext0  =    ASCI + 0x12    ; ASCI extension control register 0
                     0053    51 asext1  =    ASCI + 0x13    ; ASCI extension control register 1
                     005A    52 astc0l  =    ASCI + 0x1A    ; time constant low register ch. 0
                     005B    53 astc0h  =    ASCI + 0x1B    ; time constant high register ch. 0
                     005C    54 astc1l  =    ASCI + 0x1C    ; time constant low register ch. 1
                     005D    55 astc1h  =    ASCI + 0x1D    ; time constant high register ch. 1
                             56 .endif
                             57 
                             58 ;       CSI/O registers
                     0040    59 CSIO    =       Z180_IO_BASE
                             60 
                     004A    61 cntr    =    CSIO + 0x0A    ; CSI/O control register            p. 296
                     004B    62 trdr    =    CSIO + 0x0B    ; transmit/receive data register
                             63 
                             64 ;       Timer registers
                     0040    65 TIMR    =       Z180_IO_BASE
                             66 
                     004C    67 tmdr0l  =    TIMR + 0x0C    ; timer data channel 0 low
                     004D    68 tmdr0h  =    TIMR + 0x0D    ;       channel 0 high
                     004E    69 rldr0l  =    TIMR + 0x0E    ; timer reload channel 0 low
                     004F    70 rldr0h  =    TIMR + 0x0F    ;       channel 0 high
                     0050    71 tcr     =    TIMR + 0x10    ; timer control register channel 0 low
                     0054    72 tmdr1l  =    TIMR + 0x14    ; timer data channel 1 low
                     0055    73 tmdr1h  =    TIMR + 0x15    ;       channel 1 high
                     0056    74 rldr1l  =    TIMR + 0x16    ; timer reload channel 1 low
                     0057    75 rldr1h  =    TIMR + 0x17    ;       channel 1 high
                             76 
                     0058    77 frc     =    TIMR + 0x18    ; free running counter (read only)
                     0001    78 .if  Z8S180
                     005E    79 cmr     =    TIMR + 0x1E    ; Clock multiplier register
                     005F    80 ccr     =    TIMR + 0x1F    ; CPU control register
                             81 .endif
                             82 
                             83 ;       DMA registers
                     0040    84 DMA     =       Z180_IO_BASE
                             85 
                     0060    86 sar0l   =     DMA + 0x20    ; source address channel 0 low
                     0061    87 sar0h   =     DMA + 0x21    ;       channel 0 high
                     0062    88 sar0b   =     DMA + 0x22    ; source address channel 0 B
                     0063    89 dar0l   =     DMA + 0x23    ; destination address channel 0 low
                     0064    90 dar0h   =     DMA + 0x24    ;       channel 0 high
                     0065    91 dar0b   =     DMA + 0x25    ;       channel 0 B
                     0066    92 bcr0l   =     DMA + 0x26    ; byte count channel 0 low
                     0067    93 bcr0h   =     DMA + 0x27    ;       channel 0 high
                     0068    94 mar1l   =     DMA + 0x28    ; memory address channel 1 low
                     0069    95 mar1h   =     DMA + 0x29    ;       channel 1 high
                     006A    96 mar1b   =     DMA + 0x2A    ;       channel 1 B
                     006B    97 iar1l   =     DMA + 0x2B    ; I/O address register channel 1 low
                     006C    98 iar1h   =     DMA + 0x2C    ;       channel 1 high
                     0001    99 .if  Z8S180
                     006D   100 iar1b   =     DMA + 0x2D    ;       channel 1 B
                            101 .endif
                     006E   102 bcr1l   =     DMA + 0x2E    ; byte count channel 1 low
                     006F   103 bcr1h   =     DMA + 0x2F    ;       channel 1 high
                     0070   104 dstat   =     DMA + 0x30    ; DMA status register
                     0071   105 dmode   =     DMA + 0x31    ; DMA mode register             p. 299
                     0072   106 dcntl   =     DMA + 0x32    ; DMA/WAIT control register
                            107 
                            108 ;       MMU registers
                     0040   109 MMU     =       Z180_IO_BASE
                            110 
                     0078   111 cbr     =     MMU + 0x38    ; common base register
                     0079   112 bbr     =     MMU + 0x39    ; bank base register
                     007A   113 cbar    =     MMU + 0x3A    ; common/bank register
                            114 
                            115 ;       MISCELLANEOUS registers
                     0040   116 MISC    =       Z180_IO_BASE
                            117 
                     0073   118 il      =    MISC + 0x33    ; interrupt vector low reg.
                     0074   119 itc     =    MISC + 0x34    ; INT/TRAP control
                     0076   120 rcr     =    MISC + 0x36    ; refresh control register      p. 302
                     007E   121 omcr    =    MISC + 0x3E    ; operation mode control       p. 300
                     003F   122 icr     =           0x3F    ; I/O base control register
                            123 
                            124 
                            125 ; END z180cpu.s
                            126 
                             25 
                             26 	.globl	_Yputchar, _Qstatus
                             27 	.globl	_delay8
                             28 
                             29 ; just temporary:
                             30 
                             31 	.area	_CODE
                             32 
   0000                      33 _Yputchar::
   0000 E1            [ 9]   34 	pop	hl
   0001 C1            [ 9]   35 	pop	bc
   0002 C5            [11]   36 	push	bc
   0003 E5            [11]   37 	push	hl
                             38 
                     0002    39 TDRE    =       0x02            ; transmit data register empty
   0004                      40 putchar0:
   0004 ED 38 44      [12]   41         in0     a,(stat0)
   0007 E6 02         [ 6]   42         and     a,#TDRE
   0009 28 F9         [ 8]   43         jr      z,putchar0
                             44 
   000B ED 09 46      [13]   45         out0    (tdr0),c
   000E 69            [ 4]   46 	ld	l,c
   000F 26 00         [ 6]   47 	ld	h,#0		; return an 'int'
   0011 C9            [ 9]   48         ret
                             49 
                             50 
                             51 ; return the number of characters waiting in the input queue
                             52 ;
   0012                      53 _Qstatus::
   0012 ED 38 44      [12]   54  	in0	a,(stat0)
   0015 87            [ 4]   55 	add	a,a		; test RDRF (0x80)
   0016 9F            [ 4]   56 	sbc	a,a		; A=0 or -1
   0017 ED 44         [ 6]   57 	neg			; A=0 or 1
   0019 6F            [ 4]   58 	ld	l,a
   001A 26 00         [ 6]   59 	ld	h,#0		; return an 'int'
   001C C9            [ 9]   60 	ret			; return 0 or 1
                             61 
                             62 
                             63 ; get a character from SIO0, waiting for one to arrive
                             64 ;
   001D                      65 getloop:
   001D CDr00r00      [16]   66 	call	_delay8		; insert a wait
   0020                      67 _Ygetchar::
   0020 ED 38 44      [12]   68  	in0	a,(stat0)	; read status
   0023 87            [ 4]   69 	add	a,a		; RDRF 
   0024 30 F7         [ 8]   70 	jr	nc,getloop	; wait for input to arrive
   0026 ED 28 48      [12]   71 	in0	l,(rdr0)	; get input character
   0029 26 00         [ 6]   72 	ld	h,#0		; return an 'int'
   002B C9            [ 9]   73 	ret
                             74 
